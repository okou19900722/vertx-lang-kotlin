package io.vertx.kotlin.ext.sql

import io.vertx.core.json.JsonArray
import io.vertx.ext.sql.FetchDirection
import io.vertx.ext.sql.ResultSetConcurrency
import io.vertx.ext.sql.ResultSetType
import io.vertx.ext.sql.SQLOptions
import io.vertx.ext.sql.TransactionIsolation
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.Int

/**
 * A function providing a DSL for building [SQLOptions] objects.
 *
 *  Represents the options one can use to customize the unwrapped connection/statement/resultset
    types
 *
 *
 * <p/>
 * NOTE: This function has been automatically generated from the [SQLOptions original] using Vert.x
    codegen.
 */
fun sqlOptionsOf(
  autoGeneratedKeys: Boolean? = null,
  autoGeneratedKeysIndexes: JsonArray? = null,
  catalog: String? = null,
  fetchDirection: FetchDirection? = null,
  fetchSize: Int? = null,
  queryTimeout: Int? = null,
  readOnly: Boolean? = null,
  resultSetConcurrency: ResultSetConcurrency? = null,
  resultSetType: ResultSetType? = null,
  schema: String? = null,
  transactionIsolation: TransactionIsolation? = null
) = SQLOptions()
.apply {
  if (autoGeneratedKeys != null) {
    this.setAutoGeneratedKeys(autoGeneratedKeys)
  }
  if (autoGeneratedKeysIndexes != null) {
    this.setAutoGeneratedKeysIndexes(autoGeneratedKeysIndexes)
  }
  if (catalog != null) {
    this.setCatalog(catalog)
  }
  if (fetchDirection != null) {
    this.setFetchDirection(fetchDirection)
  }
  if (fetchSize != null) {
    this.setFetchSize(fetchSize)
  }
  if (queryTimeout != null) {
    this.setQueryTimeout(queryTimeout)
  }
  if (readOnly != null) {
    this.setReadOnly(readOnly)
  }
  if (resultSetConcurrency != null) {
    this.setResultSetConcurrency(resultSetConcurrency)
  }
  if (resultSetType != null) {
    this.setResultSetType(resultSetType)
  }
  if (schema != null) {
    this.setSchema(schema)
  }
  if (transactionIsolation != null) {
    this.setTransactionIsolation(transactionIsolation)
  }
}

/**
 * A function providing a DSL for building [SQLOptions] objects.
 *
 *  Represents the options one can use to customize the unwrapped connection/statement/resultset
    types
 *
 *
 * <p/>
 * NOTE: This function has been automatically generated from the [SQLOptions original] using Vert.x
    codegen.
 */
@Deprecated(
    "This function will be removed in a future version",
    ReplaceWith("sqlOptionsOf(autoGeneratedKeys,autoGeneratedKeysIndexes,catalog,fetchDirection,fetchSize,queryTimeout,readOnly,resultSetConcurrency,resultSetType,schema,transactionIsolation)")
)
fun SQLOptions(
  autoGeneratedKeys: Boolean? = null,
  autoGeneratedKeysIndexes: JsonArray? = null,
  catalog: String? = null,
  fetchDirection: FetchDirection? = null,
  fetchSize: Int? = null,
  queryTimeout: Int? = null,
  readOnly: Boolean? = null,
  resultSetConcurrency: ResultSetConcurrency? = null,
  resultSetType: ResultSetType? = null,
  schema: String? = null,
  transactionIsolation: TransactionIsolation? = null
) = SQLOptions()
.apply {
  if (autoGeneratedKeys != null) {
    this.setAutoGeneratedKeys(autoGeneratedKeys)
  }
  if (autoGeneratedKeysIndexes != null) {
    this.setAutoGeneratedKeysIndexes(autoGeneratedKeysIndexes)
  }
  if (catalog != null) {
    this.setCatalog(catalog)
  }
  if (fetchDirection != null) {
    this.setFetchDirection(fetchDirection)
  }
  if (fetchSize != null) {
    this.setFetchSize(fetchSize)
  }
  if (queryTimeout != null) {
    this.setQueryTimeout(queryTimeout)
  }
  if (readOnly != null) {
    this.setReadOnly(readOnly)
  }
  if (resultSetConcurrency != null) {
    this.setResultSetConcurrency(resultSetConcurrency)
  }
  if (resultSetType != null) {
    this.setResultSetType(resultSetType)
  }
  if (schema != null) {
    this.setSchema(schema)
  }
  if (transactionIsolation != null) {
    this.setTransactionIsolation(transactionIsolation)
  }
}
